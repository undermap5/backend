name: CI/CD

on:
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  CI-CD:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_DB: ${{ secrets.DB_NAME }}
          POSTGRES_USER: ${{ secrets.DB_USER }}
          POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }}
        ports:
          - 5432:5432
      redis:
        image: redis:7.2
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v3

      - name: QEMU 설정
        uses: docker/setup-qemu-action@v1

      - name: Docker Buildx 설정
        uses: docker/setup-buildx-action@v1

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-  
      - name: Docker build & push to dockerhub
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -t ${{ secrets.DOCKER_USERNAME }}/undermap:v1 -f demo/Dockerfile undermap
          docker push ${{ secrets.DOCKER_USERNAME }}/undermap:v1
      - name: Deploy to prod
        uses: appleboy/ssh-action@master
        id: deploy-prod
        with:
          host: ${{ secrets.DEVELOP_HOST_EC2 }}
          username: ubuntu
          key: ${{ secrets.DEVELOP_PRIVATE_KEY }}
          envs: GITHUB_SHA
          script: |
            sudo docker login -u "${{ secrets.DOCKER_USERNAME }}" -p "${{ secrets.DOCKER_PASSWORD }}"
            sudo docker ps
            sudo docker stop backend
            sudo docker rm backend
            sudo docker pull "${{ secrets.DOCKER_USERNAME }}"/demo:v1
            sudo docker run -d --name backend -p 8080:8080 "${{ secrets.DOCKER_USERNAME }}"/undermap:v1
            sudo docker image prune -f
